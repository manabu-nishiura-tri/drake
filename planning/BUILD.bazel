load(
    "//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

drake_cc_package_library(
    name = "planning",
    visibility = ["//visibility:public"],
    deps = [
        ":adjacency_matrix_builder_base",
        ":approximate_convex_cover_builder_base",
        ":body_shape_description",
        ":collision_avoidance",
        ":collision_checker",
        ":collision_checker_context",
        ":collision_checker_params",
        ":convex_set_from_clique_builder_base",
        ":coverage_checker_base",
        ":coverage_checker_via_bernoulli_test",
        ":distance_and_interpolation_provider",
        ":iris_from_clique_cover",
        ":iris_region_from_clique_builder",
        ":linear_distance_and_interpolation_provider",
        ":point_sampler_base",
        ":rejection_sampler",
        ":robot_clearance",
        ":robot_collision_type",
        ":robot_diagram",
        ":robot_diagram_builder",
        ":scene_graph_collision_checker",
        ":uniform_set_sampler",
        ":unimplemented_collision_checker",
        ":visibility_graph",
        ":visibility_graph_builder",
    ],
)

drake_cc_library(
    name = "body_shape_description",
    srcs = ["body_shape_description.cc"],
    hdrs = ["body_shape_description.h"],
    deps = [
        "//common:essential",
        "//geometry",
        "//multibody/plant",
    ],
)

drake_cc_library(
    name = "collision_avoidance",
    srcs = ["collision_avoidance.cc"],
    hdrs = ["collision_avoidance.h"],
    deps = [
        ":collision_checker",
    ],
)

drake_cc_library(
    name = "collision_checker",
    srcs = ["collision_checker.cc"],
    hdrs = [
        "collision_checker.h",
        "edge_measure.h",
    ],
    interface_deps = [
        ":body_shape_description",
        ":collision_checker_context",
        ":collision_checker_params",
        ":distance_and_interpolation_provider",
        ":robot_clearance",
        ":robot_collision_type",
        ":robot_diagram",
        "//common:essential",
        "//common:parallelism",
        "//geometry",
        "//multibody/plant",
    ],
    deps = [
        ":linear_distance_and_interpolation_provider",
        "@common_robotics_utilities",
    ],
)

drake_cc_library(
    name = "collision_checker_context",
    srcs = ["collision_checker_context.cc"],
    hdrs = ["collision_checker_context.h"],
    deps = [
        ":robot_diagram",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "collision_checker_params",
    hdrs = ["collision_checker_params.h"],
    deps = [
        ":distance_and_interpolation_provider",
        ":robot_diagram",
        "//common:parallelism",
        "//multibody/tree:multibody_tree_indexes",
    ],
)

drake_cc_library(
    name = "distance_and_interpolation_provider",
    srcs = ["distance_and_interpolation_provider.cc"],
    hdrs = ["distance_and_interpolation_provider.h"],
    deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "linear_distance_and_interpolation_provider",
    srcs = ["linear_distance_and_interpolation_provider.cc"],
    hdrs = ["linear_distance_and_interpolation_provider.h"],
    interface_deps = [
        ":distance_and_interpolation_provider",
        "//multibody/plant",
    ],
    deps = [
        "//common:essential",
        "@common_robotics_utilities",
    ],
)

drake_cc_library(
    name = "robot_clearance",
    srcs = ["robot_clearance.cc"],
    hdrs = ["robot_clearance.h"],
    deps = [
        ":robot_collision_type",
        "//common:essential",
        "//multibody/tree:multibody_tree_indexes",
    ],
)

drake_cc_library(
    name = "robot_collision_type",
    hdrs = ["robot_collision_type.h"],
)

drake_cc_library(
    name = "robot_diagram",
    srcs = ["robot_diagram.cc"],
    hdrs = ["robot_diagram.h"],
    deps = [
        "//common:default_scalars",
        "//geometry:scene_graph",
        "//multibody/plant",
        "//systems/framework:diagram",
        "//systems/framework:diagram_builder",
    ],
)

drake_cc_library(
    name = "robot_diagram_builder",
    srcs = ["robot_diagram_builder.cc"],
    hdrs = ["robot_diagram_builder.h"],
    deps = [
        ":robot_diagram",
        "//common:default_scalars",
        "//geometry:scene_graph",
        "//multibody/parsing",
        "//multibody/plant",
        "//systems/framework:diagram_builder",
    ],
)

drake_cc_library(
    name = "scene_graph_collision_checker",
    srcs = ["scene_graph_collision_checker.cc"],
    hdrs = ["scene_graph_collision_checker.h"],
    interface_deps = [
        ":collision_checker",
        ":collision_checker_params",
    ],
    deps = [
        ":robot_diagram",
        "//geometry",
        "//multibody/plant",
    ],
)

drake_cc_library(
    name = "unimplemented_collision_checker",
    srcs = ["unimplemented_collision_checker.cc"],
    hdrs = ["unimplemented_collision_checker.h"],
    deps = [
        ":collision_checker",
        ":collision_checker_params",
    ],
)

drake_cc_library(
    name = "planning_test_helpers",
    testonly = True,
    srcs = ["test/planning_test_helpers.cc"],
    hdrs = ["test/planning_test_helpers.h"],
    visibility = ["//visibility:private"],
    deps = [
        ":collision_checker",
        ":robot_diagram_builder",
        "//multibody/parsing",
    ],
)

drake_cc_library(
    name = "visibility_graph",
    srcs = ["visibility_graph.cc"],
    hdrs = ["visibility_graph.h"],
    interface_deps = [
        ":collision_checker",
        "//common:parallelism",
    ],
    deps = [
        "@common_robotics_utilities",
    ],
)

drake_cc_library(
    name = "adjacency_matrix_builder_base",
    srcs = ["adjacency_matrix_builder_base.cc"],
    hdrs = ["adjacency_matrix_builder_base.h"],
    interface_deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "visibility_graph_builder",
    srcs = ["visibility_graph_builder.cc"],
    hdrs = ["visibility_graph_builder.h"],
    interface_deps = [
        ":adjacency_matrix_builder_base",
        ":visibility_graph",
        ":collision_checker",
    ],
)

drake_cc_library(
    name = "approximate_convex_cover_builder_base",
    srcs = ["approximate_convex_cover_builder_base.cc"],
    hdrs = ["approximate_convex_cover_builder_base.h"],
    interface_deps = [
        "//geometry/optimization:convex_set",
        "//planning/graph_algorithms:max_clique_solver_base",
        ":point_sampler_base",
        ":coverage_checker_base",
        ":convex_set_from_clique_builder_base",
        ":adjacency_matrix_builder_base",
    ],
)

drake_cc_library(
    name = "iris_from_clique_cover",
    srcs = ["iris_from_clique_cover.cc"],
    hdrs = ["iris_from_clique_cover.h"],
    interface_deps = [
        ":approximate_convex_cover_builder_base",
        "//geometry/optimization:convex_set",
        ":rejection_sampler",
        ":uniform_set_sampler",
        "//geometry/optimization:iris",
        "//planning/graph_algorithms:max_clique_solver_via_mip",
        "//planning/graph_algorithms:max_clique_solver_base",
        ":iris_region_from_clique_builder",
        ":coverage_checker_via_bernoulli_test",
    ],
)

drake_cc_library(
    name = "point_sampler_base",
    srcs = ["point_sampler_base.cc"],
    hdrs = ["point_sampler_base.h"],
    interface_deps = [
        "//common:essential",
        "//common:random",
        "//geometry/optimization:convex_set",
    ],
)

drake_cc_library(
    name = "uniform_set_sampler",
    srcs = ["uniform_set_sampler.cc"],
    hdrs = ["uniform_set_sampler.h"],
    interface_deps = [
        ":point_sampler_base",
        "//geometry/optimization:convex_set",
    ],
)

drake_cc_library(
    name = "rejection_sampler",
    srcs = ["rejection_sampler.cc"],
    hdrs = ["rejection_sampler.h"],
    interface_deps = [
        ":point_sampler_base",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "coverage_checker_base",
    srcs = ["coverage_checker_base.cc"],
    hdrs = ["coverage_checker_base.h"],
    interface_deps = [
        "//common:essential",
        "//geometry/optimization:convex_set",
    ],
)

drake_cc_library(
    name = "coverage_checker_via_bernoulli_test",
    srcs = ["coverage_checker_via_bernoulli_test.cc"],
    hdrs = ["coverage_checker_via_bernoulli_test.h"],
    interface_deps = [
        ":coverage_checker_base",
        ":point_sampler_base",
        "//common",
    ],
)

drake_cc_library(
    name = "convex_set_from_clique_builder_base",
    srcs = ["convex_set_from_clique_builder_base.cc"],
    hdrs = ["convex_set_from_clique_builder_base.h"],
    interface_deps = [
        "//geometry/optimization:convex_set",
    ],
)

drake_cc_library(
    name = "iris_region_from_clique_builder",
    srcs = ["iris_region_from_clique_builder.cc"],
    hdrs = ["iris_region_from_clique_builder.h"],
    interface_deps = [
        "//geometry/optimization:convex_set",
        "//geometry/optimization:iris",
        ":convex_set_from_clique_builder_base",
    ],
)

drake_cc_googletest(
    name = "body_shape_description_test",
    deps = [
        ":body_shape_description",
        ":robot_diagram_builder",
        "//multibody/parsing",
        "//multibody/plant",
    ],
)

drake_cc_googletest(
    name = "collision_avoidance_test",
    deps = [
        ":collision_avoidance",
        ":robot_diagram_builder",
        ":unimplemented_collision_checker",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "collision_checker_test",
    # Running with multiple threads is an essential part of our test coverage.
    num_threads = 2,
    deps = [
        ":collision_checker",
        ":planning_test_helpers",
        ":unimplemented_collision_checker",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
        "@common_robotics_utilities",
    ],
)

drake_cc_googletest(
    name = "collision_checker_context_test",
    deps = [
        ":collision_checker_context",
        ":robot_diagram_builder",
    ],
)

drake_cc_googletest(
    name = "distance_and_interpolation_provider_test",
    deps = [
        ":distance_and_interpolation_provider",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
        "@common_robotics_utilities",
    ],
)

drake_cc_googletest(
    name = "linear_distance_and_interpolation_provider_test",
    data = [
        "//manipulation/models/iiwa_description:models",
        "//planning/test_utilities:collision_ground_plane.sdf",
        "//planning/test_utilities:flying_robot_base.sdf",
    ],
    deps = [
        ":linear_distance_and_interpolation_provider",
        ":planning_test_helpers",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
        "@common_robotics_utilities",
    ],
)

drake_cc_googletest(
    name = "robot_clearance_test",
    deps = [
        ":robot_clearance",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "robot_collision_type_test",
    deps = [
        ":robot_collision_type",
    ],
)

drake_cc_googletest(
    name = "robot_diagram_test",
    data = [
        "//manipulation/models/iiwa_description:models",
    ],
    deps = [
        ":robot_diagram",
        ":robot_diagram_builder",
        "//common/test_utilities:expect_throws_message",
        "//systems/primitives:shared_pointer_system",
    ],
)

drake_cc_googletest(
    name = "scene_graph_collision_checker_test",
    timeout = "moderate",
    data = [
        "//manipulation/models/ycb:models",
    ],
    # Running with multiple threads is an essential part of our test coverage.
    num_threads = 2,
    deps = [
        ":linear_distance_and_interpolation_provider",
        ":planning_test_helpers",
        ":scene_graph_collision_checker",
        "//common/test_utilities:eigen_matrix_compare",
        "//planning/test_utilities:collision_checker_abstract_test_suite",
    ],
)

drake_cc_googletest(
    name = "visibility_graph_test",
    # Running with multiple threads is an essential part of our test coverage.
    num_threads = 2,
    deps = [
        ":robot_diagram_builder",
        ":scene_graph_collision_checker",
        ":visibility_graph",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "unimplemented_collision_checker_test",
    deps = [
        ":robot_diagram_builder",
        ":unimplemented_collision_checker",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "uniform_set_sampler_test",
    deps = [
        ":uniform_set_sampler",
        "//common/test_utilities:eigen_matrix_compare",
        "//geometry/optimization:convex_set",
    ],
)

drake_cc_googletest(
    name = "rejection_sampler_test",
    deps = [
        ":rejection_sampler",
        ":uniform_set_sampler",
        "//common/test_utilities:eigen_matrix_compare",
        "//geometry/optimization:convex_set",
    ],
)

drake_cc_googletest(
    name = "coverage_checker_via_bernoulli_test_test",
    # Running with multiple threads is an essential part of our test coverage.
    num_threads = 2,
    deps = [
        ":coverage_checker_via_bernoulli_test",
        ":uniform_set_sampler",
    ],
)

drake_cc_googletest(
    name = "iris_region_from_clique_builder_test",
    deps = [":iris_region_from_clique_builder",
            "//multibody/parsing:parser",
        "//systems/framework:diagram_builder"],
)

drake_cc_googletest(
    name = "iris_from_clique_cover_test",
    timeout = "moderate",
    deps = [":iris_from_clique_cover"],
)

add_lint_tests()
